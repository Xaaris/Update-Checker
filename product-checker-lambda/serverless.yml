service: product-checker

custom:
  bucketName: hw-jobs-integration-product-checker
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: frontend/dist
      acl: public-read

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    AWS_DEPLOY_REGION: ${self:provider.region}
    USER_TABLE: productCheckerUsersTable
    PRODUCT_TABLE: productCheckerProductTable
    SUBSCRIPTION_TABLE: productCheckerSubscriptionTable
    PRODUCT_UPDATE_TOPIC: productUpdateTopic
    USER_NOTIFICATION_TOPIC: userNotificationTopic
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://dev-hw-jobs-integration.eu.auth0.com/
        audience: productchecker
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USER_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCT_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCT_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.SUBSCRIPTION_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.SUBSCRIPTION_TABLE}/index/*"
        - Effect: Allow
          Action:
            - SNS:Publish
          Resource:
            - { "Fn::Join": [ ":", [ "arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:provider.environment.PRODUCT_UPDATE_TOPIC}" ] ] }
            - { "Fn::Join": [ ":", [ "arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:provider.environment.USER_NOTIFICATION_TOPIC}" ] ] }

package:
  patterns:
    - '!frontend/**'

plugins:
  - serverless-s3-sync

functions:
  # Products
  listProducts:
    handler: functions/products.getAll
    events:
      - httpApi:
          method: GET
          path: /api/products
          authorizer: serviceAuthorizer
  # Subscriptions
  subscribe:
    handler: functions/subscriptions.post
    events:
      - httpApi:
          method: POST
          path: /api/subscribe
          authorizer: serviceAuthorizer
  unsubscribe:
    handler: functions/subscriptions.delete
    events:
      - httpApi:
          method: DELETE
          path: /api/unsubscribe
          authorizer: serviceAuthorizer
  listSubscribtions:
    handler: functions/subscriptions.getAllForUser
    events:
      - httpApi:
          method: GET
          path: /api/subscriptions
          authorizer: serviceAuthorizer
  listUsers:
    handler: functions/users.get
    events:
      - httpApi:
          method: GET
          path: /api/users
          authorizer: serviceAuthorizer
  # Provider functions
  refreshIkea:
    handler: functions/providerIKEA.refresh
    events:
      - schedule: rate(1 day)
    environment:
      SNS_PRODUCT_UPDATE_TOPIC_ARN: { "Fn::Join": [ ":", [ "arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:provider.environment.PRODUCT_UPDATE_TOPIC}" ] ] }
  sendUserNotifications:
    handler: functions/notifications.sendUserNotifications
    events:
      - sns:
          arn:  { "Fn::Join": [ ":", [ "arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:provider.environment.PRODUCT_UPDATE_TOPIC}" ] ] }
          topicName: ${self:provider.environment.PRODUCT_UPDATE_TOPIC}
    environment:
      SNS_USER_NOTIFICATION_TOPIC_ARN: { "Fn::Join": [ ":", [ "arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:provider.environment.USER_NOTIFICATION_TOPIC}" ] ] }

resources:
  - ${file(resources/dynamo-db.yml)}
  - ${file(resources/sns.yml)}
  - ${file(resources/s3.yml)}
